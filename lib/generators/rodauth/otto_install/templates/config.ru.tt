# frozen_string_literal: true

require "dotenv/load"
require_relative "lib/rodauth_app"
require "otto"

# Create Otto instance with your routes file
otto = Otto.new("<%= routes_file %>")

# Otto's built-in security features
# Note: Otto has its own CSRF protection which works alongside Rodauth
<% unless api_only? -%>
otto.enable_csrf_protection!       # Otto's CSRF protection for Otto routes
otto.enable_request_validation!    # Validate request methods match routes
<% end -%>

# Rate limiting (optional but recommended)
# otto.enable_rate_limiting!(requests_per_minute: 60)

# Add Rodauth middleware BEFORE Otto
# This allows Rodauth to handle authentication routes first
use RodauthApp

# Run Otto application
run otto

# Otto Route Protection Example
# ==============================
#
# To protect Otto routes with Rodauth authentication, you can:
#
# 1. Use before filters in your Otto handlers:
#
#    def dashboard
#      # Check if user is logged in
#      redirect '/login' unless rodauth.logged_in?
#      # ... handle request
#    end
#
# 2. Access Rodauth methods in your Otto handlers:
#
#    def profile
#      user_id = rodauth.session_value
#      account = DB[:accounts].where(id: user_id).first
#      # ... render profile
#    end
#
# 3. For API routes, check JWT tokens:
#
<% if jwt? -%>
#    def api_endpoint
#      token = request.env['HTTP_AUTHORIZATION']&.split(' ')&.last
#      payload = rodauth.jwt_decode(token)
#      # ... handle authenticated API request
#    end
<% end -%>
#
# See Otto documentation for more: https://github.com/delano/otto
